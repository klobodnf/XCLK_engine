#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class StatusInfo:
  """
  Attributes:
   - id
   - ip
   - cupRatio
   - memTotal
   - memUsed
   - memRatio
   - diskTotal
   - diskUsed
   - diskRatio
   - netDelay
   - loadAvg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'ip', None, None, ), # 2
    (3, TType.DOUBLE, 'cupRatio', None, None, ), # 3
    (4, TType.I64, 'memTotal', None, None, ), # 4
    (5, TType.I64, 'memUsed', None, None, ), # 5
    (6, TType.DOUBLE, 'memRatio', None, None, ), # 6
    (7, TType.I64, 'diskTotal', None, None, ), # 7
    (8, TType.I64, 'diskUsed', None, None, ), # 8
    (9, TType.DOUBLE, 'diskRatio', None, None, ), # 9
    (10, TType.DOUBLE, 'netDelay', None, None, ), # 10
    (11, TType.DOUBLE, 'loadAvg', None, None, ), # 11
  )

  def __init__(self, id=None, ip=None, cupRatio=None, memTotal=None, memUsed=None, memRatio=None, diskTotal=None, diskUsed=None, diskRatio=None, netDelay=None, loadAvg=None,):
    self.id = id
    self.ip = ip
    self.cupRatio = cupRatio
    self.memTotal = memTotal
    self.memUsed = memUsed
    self.memRatio = memRatio
    self.diskTotal = diskTotal
    self.diskUsed = diskUsed
    self.diskRatio = diskRatio
    self.netDelay = netDelay
    self.loadAvg = loadAvg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.cupRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.memTotal = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.memUsed = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.memRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.diskTotal = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.diskUsed = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.diskRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.netDelay = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.loadAvg = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatusInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 2)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.cupRatio is not None:
      oprot.writeFieldBegin('cupRatio', TType.DOUBLE, 3)
      oprot.writeDouble(self.cupRatio)
      oprot.writeFieldEnd()
    if self.memTotal is not None:
      oprot.writeFieldBegin('memTotal', TType.I64, 4)
      oprot.writeI64(self.memTotal)
      oprot.writeFieldEnd()
    if self.memUsed is not None:
      oprot.writeFieldBegin('memUsed', TType.I64, 5)
      oprot.writeI64(self.memUsed)
      oprot.writeFieldEnd()
    if self.memRatio is not None:
      oprot.writeFieldBegin('memRatio', TType.DOUBLE, 6)
      oprot.writeDouble(self.memRatio)
      oprot.writeFieldEnd()
    if self.diskTotal is not None:
      oprot.writeFieldBegin('diskTotal', TType.I64, 7)
      oprot.writeI64(self.diskTotal)
      oprot.writeFieldEnd()
    if self.diskUsed is not None:
      oprot.writeFieldBegin('diskUsed', TType.I64, 8)
      oprot.writeI64(self.diskUsed)
      oprot.writeFieldEnd()
    if self.diskRatio is not None:
      oprot.writeFieldBegin('diskRatio', TType.DOUBLE, 9)
      oprot.writeDouble(self.diskRatio)
      oprot.writeFieldEnd()
    if self.netDelay is not None:
      oprot.writeFieldBegin('netDelay', TType.DOUBLE, 10)
      oprot.writeDouble(self.netDelay)
      oprot.writeFieldEnd()
    if self.loadAvg is not None:
      oprot.writeFieldBegin('loadAvg', TType.DOUBLE, 11)
      oprot.writeDouble(self.loadAvg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
